잘못된 공부법

아래 내용 들 중 하나라도 공감이 되시면 잘못된 공부법을 하셨다고 생각하고 
이후에 진행될 글을 보시면 도움이 되실거라고 생각합니다!

​

1. 100문제 이상을 풀었느데 코테가 아직 어렵다.

2. 코드를 제출 하였을 때 틀렸습니다, 시간초과 가 많이 나온다.

3. 문제를 풀기는 하는데 어떤 알고리즘을 써서 푼지 잘 모르겠다.

4. 혼자 공부할 때(백준, 프로그래머스)는 문제가 잘 풀리는데 실전(코테)만 가면 죽을 쑨다.

5. 문제를 읽어도 도대체 어떻게 풀어야 하는지를 모르겠다. 
(코테가 끝나고 다른 사람 풀이를 보면 아! 풀수 있었던건데 한다)


**문제다풀고 다음문제 넘어가지말고 다른사람 코드 확인해보기!!!!!
파란색으로 되어 있는 부분만 코드를 확인 할 수 있는데 
이는 문제를 푼 사람이 본인의 백준 계정 설정에서 코드 공개로 설정을 해 주셔야 합니다. 다른 사람들과 함꼐 성장하기 위해 열어 주시는 습관이 좋습니다. (다른사람이 코드보고 가면 기분도 좋아요!)
여기서 최소 3개의 코드를 보셔야 합니다

5. 문제를 풀지 못한 경우 ㅠ

열심히 문제를 풀려고 노력했지만 결국 풀지 못하는 경우가 분명 있습니다. 이렇게 될 경우 몇시간까지 투자를 해야 할까요? 개인적인 생각으로는 1시간 입니다.

어떻게 풀지 아예 감도 안오는데 1시간이 지나갔다면 구글에 
해당 문제 번호를 검색 한 뒤 맨위에 뜨는 글을 클릭합니다. 
이렇게 되면 매우 높은 확률로 상단에는 문제 설명 , 중단에는 작성자의 풀이(설계), 
하단에는 작성자의 코드 가 적혀져 있게 되고 풀이를 본후 
다시 설계를 하러 가셔서 푸시면 됩니다. 
(코드까지는 한번에 안 보시는걸 추천드립니다)


중간쯤공부하고 
https://openingsound.tistory.com/116 
보고 피드백 ㄱㄱ

===========================꼭 가져가야 하는것!!!
dfs : 깊이우선탐색으로 완전탐색을 할때 사용한다.
백트래킹 : dfs에서 더이상 정답이 아니라고 판단되는 부분은 탐색하지 않도록 가지를 치며 탐색하는 방법
bfs : 너비우선탐색으로 완전탐색이나 최단경로를 찾을때 유리
투포인터 : 특정 구간에서 작업을 할때 효율적
누적합 : 구간합을 빠르게 구하기 위한 방법
에라토스테네스의체 : 특정 범위에서 소수판별을 빠르게 할 수 있음
이분탐색 : 시간복잡도를 볼때 n보다 짧게 처리가 되야할때 사용, 정답을 두고 탐색범위를 반절씩 버리면서 탐색
구현 및 시뮬레이션 문제 : 요구사항 구현, 문자열 관련 문제 등
유클리드호제법 : 최대공약수, 최소공배수 구하기
큐, 스택, 힙, 디큐, 해시를 이용한 문제풀이

============================가끔 나옴
다익스트라 : 한 출발점에서 모든 다른지점까지의 최단거리
플로이드와샬 : 모든 지점간의 최단거리를 찾을때 사용
유니온파인드 : 같은 부모에 속한 그래프인지 체크하기 위해 사용
크루스칼 : 최소신장트리를 만들때 사용, 엣지를 정렬하여 연결
프림 : 최소신장 트리를 만들때 사용, 노드를 선택 후 가장 적은 비용을 가진 엣지를 연결
LCS : 최장 공통 부분 수열
