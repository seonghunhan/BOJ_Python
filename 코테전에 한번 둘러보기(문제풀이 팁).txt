1. 20546 기적의매매법
- 어떤 리스트내에 있는 숫자에서 3번 연속 낮아지거나 올라지거나 하는 경우 찾기
- 리스트안에 맨 앞을 어떻게 다룰지 중요
-> for i in range(1, len(listname)) : 이렇게해서 listname[i] > listname[i-1] 이런식으로 하면 인덱스오류도 안나고 구현가능!
https://e-you.tistory.com/369 여기보면 list[0] < list[1] < list[2] 이렇게 한번에 조건걸고 실행하고 마지막에 pop(0)으로도 구현하였음!


2. 문제에서 인덱스를 0부터 다루는게 아니라 1부터 다루는 경우
switchList = [0] + list(map(int, input().split())) 이런식으로 리스트만들기


3. 문제에서 출력을 20개씩 하라고할때
for i in range(1, N+1):
    print(switchList[i], end = " ")
    if i % 20 == 0 :
        print()

4. NXN의 리스트가 아닌 불규칙한 리스트에서 좌표 찾을때
https://tmdrl5779.tistory.com/133 문제 참고

keyboard = ['qwertyuiop', 'asdfghjkl', 'zxcvbnm']
mo = 'yuiophjklbnm'

xl, yl, xr, yr = None, None, None, None

for i in range(len(keyboard)):
    if left in keyboard[i]:
        xl = i
        yl = keyboard[i].index(left) <= 이거씀 index('찾고자하는요소')


5. bfs처럼 탐색이아니라 벽에 부딪칠때까지 탐색하고 부딪치면 달팽이모양처럼 방향 전환이 필요한 경우! -> 구현 1913이고 비슷하게 푼사이트 -> https://egg-money.tistory.com/85

dir = [[1,0], [0,1], [-1,0], [0,-1]]

while True :
    # 벽이 아니거나 0일경우에 탐색
    if 0 <= x < N and 0 <= y < N and board[x][y] == 0: 
        num -= 1
        board[x][y] = num
        x += dir[d][0]
        y += dir[d][1]
    else :
        # 여기가 중요! 위에서 x,y를 추가하고 넘기니까 오버된다 그러니까 일단 다시 빠꾸 해주기!!
        x -= dir[d][0]
        y -= dir[d][1]
        
        # 방향 전환해서 추가해주기
        d = (d + 1) % 4
        x += dir[d][0]
        y += dir[d][1]




6. copy.deepcopy 웬만하면 쓰지말고 그냥 카피당하는걸 새로 초기화시켜서 새롭게 스와핑시키는방향으로 가기(시간차이 개쩜)
ex ) 구현(22858) 참고